/**
* Name: TransportAirPollutionExposureModel
* Author: Tabea Sonnenschein
* Description:
* Tags: Urban Health; 
*/

model TransportAirPollutionExposureModel
  
global{	
/**********************************/
/*** Declaring global variables ***/
/**********************************/
	
	/*** loading the spatial built environment ***/
	string path_data <- "C:/Users/Tabea/Documents/PhD EXPANSE/Data/Tutorial on ABM for EXPOSOME Science/Data/";
	file shape_file_buildings <- shape_file(path_data+"Buildings.shp");
    file shape_file_Residences <- shape_file(path_data+"Residences_neighcode_RDNew.shp");    
    file shape_file_streets <- shape_file(path_data+"Amsterdam_roads_RDNew.shp");
    file shape_file_greenspace <- shape_file(path_data+"Green Spaces_RDNew_window.shp");
    file spatial_extent <- shape_file(path_data+"Amsterdam Diemen Oude Amstel Extent.shp");  
   	geometry shape <- envelope(spatial_extent); 
   	map<string,rgb> color_per_type <- ["streets"::#aqua, "vegetation":: #green, "buildings":: rgb(40,40,40), "NO2":: #red];

	/*** loading Environmental Stressor Maps ***/
	file shape_file_NoiseContour <- shape_file(path_data+"PDOK_NoiseMap2016_Lden_RDNew_clipped.shp");    
	file shape_NO2 <- shape_file(path_data + "AmsterdamNO2.shp");
	
	/*** loading agent population attributes ***/
    csv_file Synth_Agent_file <- csv_file(path_data + "Agent_pop_subset_100.csv", ";", string, true);

	/*** Global variables exposure ***/
//	map<string, float> inhalation_rate <- create_map(["walk", "bike", "normal"], [25.0, 40.0, 15.0]); /// breaths per minute  										
//	map<string, float> Noise_Filter <- create_map(["indoor", "car", "walk", "bike"], [0.20, 0.40, 1, 1]); /// percentage of Noise that remains (is not filtered)							
//	map<string, float> AirPollution_Filter <- create_map(["indoor", "car",  "walk", "bike"], [0.60, 0.80, 1, 1]); /// percentage of Air Pollution that remains (is not filtered)			
	
	map<string, float> travelspeed <- create_map(["walk", "bike", "car", "transit"], [1.4, 3.33, 11.11, 10.00]); /// meters per seconds (5km/h, 12km/h, 40km/h )
	list<string> modal_choice_options <- ["walk", "bike", "car", "transit"];
	map<string,rgb> modal_colors <- ["bike":: #blue, "walk":: #green, "car"::#fuchsia, "transit"::#chocolate];

	/*** set time and date ***/
    float step <- 5 #mn;  /// #mn minutes #h hours  #sec seconds #day days #week weeks #year years
    float steps_minute <- 5;
    date starting_date <- date([2018,1,1,6,50,0]); //correspond the 1st of January 2019, at 6:00:00
    int year;    
    
    
	/*** Visualization ***/
	bool drawNoise <- true;
	bool drawAirPoll <- false;  
    
    init  {
        write "setting up the model";
        write current_date;
		create Noise from: shape_file_NoiseContour with: [Decibel :: float(read('bovengrens'))] ;
		create Homes from: shape_file_Residences with: [Neighborhood:: read('nghb_cd')];
		create AirPoll from: shape_NO2 with:[NO2:: read('nlbeluxde2')];
        create Humans from: Synth_Agent_file with:[Agent_ID :: read('agent_ID'), Neighborhood :: read('neighb_code'), 
	        age:: int(read('age')), sex :: read('sex'), BMI:: read('BMI')
//	        ,migrationbackground :: read('migrationbackground'),
//	        hh_single :: int(read('hh_single')), absolved_edu:: read('absolved_education'),
//	        incomeclass:: read('incomeclass')
	        ]; 
    }
}

species Homes{
	string Neighborhood;
}

species Noise {
	float Decibel;
	aspect noise{
		if drawNoise{
			draw shape color: rgb(102, 0, 204, (0.60* (Decibel/50))) border: false;				
		}
	}
}

species AirPoll{
	float NO2;
	aspect no2_scale {
		if drawAirPoll{
			draw shape color: rgb(102, 0, 204, (0.08* NO2)) border: false;					
		}
	}
}

species Humans skills:[moving] parallel: true{
/*********************************/
/*** declaring Human variables ***/
/*********************************/

	/*individual characteristics */
	string Agent_ID;
	string Neighborhood;
	int age;					// integer age 0- 100
	string sex;  				// female, male
	string BMI; 				// "underweight", "normal_weight", "moderate_overweight", "obese"
	
	/* Additional variables that can be used (uncomment here and in the "create" operator)*/
//	string migrationbackground; // Dutch, Western, Non-Western
//	int hh_single; 				// 1 = yes, 0 = no
//	int has_child;				// 1 = yes, 0 = no
//	string absolved_edu;		// "high", "middle", "low", 0
//	int incomeclass; 			// decile groups 1-10
//	int car_access;				// access to car in household

	/* activity management */
	int on_trip <- 0;
	int activity_duration;
	int perform_activity <- 0;
	float activity_start;
	int traveling <- 0;
	int returning <- 1;
	
	/* destination locations */
	geometry residence;
	geometry destination_activity;
	
	/* travel variables */
	path track_path;
	string modalchoice;
	geometry route_eucl_line;
	float trip_distance ;
	float track_duration;
	geometry route_contour;
	list<geometry> route_segments;
	list<float> route_segment_lengths;

	/* exposure variables */
	float bike_exposure;
	float walk_exposure;
	float activity_NO2;
	float hourly_NO2;
	float hourly_mean_NO2;	
	float daily_NO2;
	float yearly_NO2;
	float activity_Noise;
	float hourly_Noise;
	float hourly_mean_Noise;
	float daily_Noise;
	float yearly_Noise;
	
/*******************************************************/
/*** setting up the initial parameters and relations ***/ 
/*******************************************************/

	init{
		residence <- one_of(Homes where ((each.Neighborhood = self.Neighborhood) and each.location != nil));
       	location <- residence.location;
	}

/************************************************************************/
/*** defining the Human transition functions (behaviour and exposure) ***/ 
/************************************************************************/

	reflex random_schedule when: (on_trip = 0 and perform_activity = 0 and returning = 1) {
		    destination_activity <- one_of(Homes);
		    activity_duration <- rnd(20,120); // between 20min and 2h
		 	if(point(destination_activity.location) != point(self.location)){		/// if the destination location is differnt to where the agent is
		 		route_eucl_line <- line(container(point(self.location), point(destination_activity.location)));
		 		trip_distance <- (self.location distance_to destination_activity);
		 		modalchoice <- modal_choice_options at rnd(0,3,1);    /// they choose a random mode of transport
				track_path <-  path(route_eucl_line);   /// they travel along the euclidean line
		 		traveling <- 1;
		 		on_trip <- 1;
		 		returning <- 0;
		 	}		 
		 	else{
		 		on_trip <- 0;
		 		perform_activity <- 1;
		 		activity_start <-  int(time / 60);  // the minute when it starts
		 	}
	}
	reflex traveling when:  traveling = 1 and returning = 0 {
		write "traveling to destination"; 
		do follow path: self.track_path speed: travelspeed[modalchoice];
		if((self.location = self.destination_activity.location)){    /// if the agent reached its destination
			self.location <- destination_activity.location;
			perform_activity <- 1;
			traveling <- 0;
			activity_start <-  int(time / 60);  // the minute when it starts
			
			
			/*** TRAVEL EXPOSURE ***/
    		activity_NO2 <- (sum((AirPoll overlapping self.route_eucl_line) collect each.NO2)/( length(AirPoll overlapping self.route_eucl_line) + 1))  * track_duration;
			activity_Noise <- (sum((Noise overlapping self.route_eucl_line) collect each.Decibel)/(length(Noise overlapping self.route_eucl_line) +1) )  * track_duration;

//    		activity_NO2 <- (sum((AirPoll overlapping self.route_eucl_line) collect each.NO2)/( length(AirPoll overlapping self.route_eucl_line) + 1)) * inhalation_rate[modalchoice] * track_duration * AirPollution_Filter[modalchoice];
//			activity_Noise <- (sum((Noise_day overlapping self.route_eucl_line) collect each.Decibel)/(length(Noise_day overlapping self.route_eucl_line) +1) )  * track_duration * Noise_Filter[modalchoice];
    		
    		hourly_NO2 <- hourly_NO2 + activity_NO2;
			hourly_Noise <- hourly_Noise + activity_Noise;
    		
    	}
    }
    reflex performing_activity when: perform_activity = 1{
    	if((int(time / 60) - activity_start) >= activity_duration){ // if the time since the activity start equals or is larger than the activity duration 
    		perform_activity <- 0;
    		returning <- 1;
			route_eucl_line <-  line(container(point(self.location), point(residence.location)));
			track_path <-  path(route_eucl_line);  
    	}
   
		/*** ACTIVITY EXPOSURE ***/	
		activity_NO2 <- (sum((AirPoll overlapping self) collect each.NO2))* steps_minute;
		activity_Noise <- (sum((Noise overlapping self) collect each.Decibel))* steps_minute;

//		ACTIVITY_NO2 <- (SUM((AIRPOLLUTION OVERLAPPING SELF) COLLECT EACH.NO2)) * INHALATION_RATE["NORMAL"] * AIRPOLLUTION_FILTER["INDOOR"] * STEPS_MINUTE;
//		activity_Noise <- (sum((Noise_day overlapping self) collect each.Decibel)) * Noise_Filter["indoor"] * steps_minute;

		hourly_NO2 <- hourly_NO2 + activity_NO2;
		hourly_Noise <- hourly_Noise + activity_Noise;
		
	}
	
	reflex return_home when: (returning = 1 and on_trip = 1){
		write "returning";
		do follow path: self.track_path speed: travelspeed[modalchoice];
		if((self.location = self.residence.location)){ 	// if the agent reached its home
			on_trip <- 0;		
				
			/*** TRAVEL EXPOSURE ***/
			activity_NO2 <- (sum((AirPoll overlapping self.route_eucl_line) collect each.NO2)/( length(AirPoll overlapping self.route_eucl_line) + 1))  * track_duration;
			activity_Noise <- (sum((Noise overlapping self.route_eucl_line) collect each.Decibel)/(length(Noise overlapping self.route_eucl_line) +1) )  * track_duration;

//    		activity_NO2 <- (sum((AirPoll overlapping self.route_eucl_line) collect each.NO2)/( length(AirPoll overlapping self.route_eucl_line) + 1)) * inhalation_rate[modalchoice] * track_duration * AirPollution_Filter[modalchoice];
//			activity_Noise <- (sum((Noise_day overlapping self.route_eucl_line) collect each.Decibel)/(length(Noise_day overlapping self.route_eucl_line) +1) )  * track_duration * Noise_Filter[modalchoice];
    		
    		hourly_NO2 <- hourly_NO2 + activity_NO2;
			hourly_Noise <- hourly_Noise + activity_Noise;

    	}
	}
    reflex update_exposure when: current_date.minute = 0{
    	daily_NO2 <- daily_NO2 + hourly_NO2;
    	hourly_mean_NO2 <- hourly_NO2/60;
    	hourly_NO2 <- 0.0;
    	hourly_mean_Noise <- hourly_Noise/60;
    	hourly_Noise <- 0.0;
    }
    aspect base {
    	if(perform_activity = 1 or time = 0){
    		   draw sphere(40) color: #yellow;
    	}
    	else if(traveling = 1 or returning = 1){
    		draw cube(70) color: modal_colors[modalchoice];
    	}
    	
    }
}


/*****************************/
/*** Visualizing the model ***/
/*****************************/

experiment TransportAirPollutionExposureModel type: gui {
	output {
		layout horizontal([1::6000,0::4000]) tabs: false;
	
    	display stats type: java2D synchronized: true {
        	overlay position: {0, 0} size: {1, 0.05} background: #black  border: #black {
    	  	  		draw "Model Time: " + current_date  color: #white font: font("SansSerif", 17) at: {40#px, 30#px};
				}
  	      chart "Transport Mode distribution" type: histogram background: #black color: #white axes: #white size: {0.5,0.5} position: {0.5, 0.5} label_font: font("SansSerif", 12){
 		       	data "walk" value: Humans count (each.modalchoice = "walk" and each.traveling = 1) color:#green;
	        	data "bike" value: Humans count (each.modalchoice = "bike" and each.traveling = 1) color:#blue;
   		     	data "car" value: Humans count (each.modalchoice = "car" and each.traveling = 1) color:#fuchsia;
   		     	data "transit" value: Humans count (each.modalchoice = "transit" and each.traveling = 1) color:#chocolate;
   		     	data "not travelling" value: Humans count (each.perform_activity = 1) color:#yellow;
     	   }
			chart "Mean Hourly Noise Exposure" type: scatter x_label: (string(int(steps_minute))) + " Minute Steps" y_label: "Decibel" background: #black color: #white axes: #white size: {0.5,0.45} position: {0.5, 0.05} label_font: font("SansSerif", 12){
					data "Max hourly exposure" value: max(Humans collect each.hourly_mean_Noise) color: #red marker: false style: line;
					data "Mean hourly exposure" value: mean(Humans collect each.hourly_mean_Noise) color: #white marker: false style: line;
					data "Min hourly exposure" value: min(Humans collect each.hourly_mean_Noise) color: #green marker: false style: line;
			}
			chart "Mean Hourly NO2 Exposure" type: scatter x_label: (string(int(steps_minute))) + " Minute Steps" y_label: "µg" background: #black color: #white axes: #white size: {0.5,0.45} position: {0.0, 0.05} label_font: font("SansSerif", 12){
					data "Max hourly exposure" value: max(Humans collect each.hourly_mean_NO2) color: #red marker: false style: line;
					data "Mean hourly exposure" value: mean(Humans collect each.hourly_mean_NO2) color: #white marker: false style: line;
					data "Min hourly exposure" value: min(Humans collect each.hourly_mean_NO2) color: #green marker: false style: line;
			}
			chart "Agent Age Distribution" type: histogram background: #black color: #white axes: #white size: {0.5,0.25} position: {0, 0.5} {
				data "0-10" value: Humans count (each.age <= 10) color:#teal;
				data "11-20" value: Humans count ((each.age > 10) and (each.age <= 20)) color:#teal;
				data "21-30" value: Humans count ((each.age > 20) and (each.age <= 30)) color:#teal;
				data "31-40" value: Humans count ((each.age > 30) and (each.age <= 40)) color:#teal;
				data "41-50" value: Humans count ((each.age > 40) and (each.age <= 50)) color:#teal;
				data "51-60" value: Humans count ((each.age > 50) and (each.age <= 60)) color:#teal;
				data "61-70" value: Humans count ((each.age > 60) and (each.age <= 70)) color:#teal;
				data "71-80" value: Humans count ((each.age > 70) and (each.age <= 80)) color:#teal;
				data "81 or" value: Humans count (each.age > 81) color:#teal;
			}
			chart "Agent Sex Distribution" type: histogram background: #black color: #white axes: #white size: {0.5,0.25} position: {0, 0.75} label_font: font("SansSerif", 12){
				data "male" value: Humans count (each.sex = "male") color:#teal;
				data "female" value: Humans count (each.sex = "female") color:#teal ;
			}
  		 }
  		 display map type:opengl {
   		 	graphics background refresh: false{
    			draw shape color: #black;
    		}
       		graphics Buildings refresh: false{
    			draw shape_file_buildings color: rgb(40,40,40);		
			}
			graphics Streets refresh: false{
    			draw shape_file_streets color: #aqua;
			}
			graphics GreenSpace refresh: false{
    			draw shape_file_greenspace color: #green;
			}
       		species Humans aspect: base ;
       		species Noise aspect: noise;
			species AirPoll aspect: no2_scale;

       		
//			graphics Noise transparency: 0.7{
//				draw shape_file_NoiseContour color: #purple ;				
//			}
//			graphics AirPoll transparency: 0.7{
//				draw AirPoll color: #purple ;				
//			}

				
        	overlay position: {0, 0, 0} size: {180 #px, 130#px} background: #black rounded: false transparency: 0.0 {
                float y <- 30#px;
                loop type over: color_per_type.keys  {   
                	draw square(10#px) at: { 20#px, y} color: color_per_type[type] border: #white;
                	draw square(10#px) at: { 20#px, y} color: color_per_type[type] border: #white;
                	draw square(10#px) at: { 20#px, y} color: color_per_type[type] border: #white;
                	draw type at: { 50#px, y + 5#px} color: #white font: font("SansSerif", 16, #bold);		// this might look confusing. Unfortunately overlay transparency is automatically set at 0.75 (highly transparent) and that cannot be changed.
                    draw type at: { 50#px, y + 5#px} color: #white font: font("SansSerif", 16, #bold);		// this makes a legend hardly readable. Therefore I draw it multiple times above each other for stronger colors).
                    draw type at: { 50#px, y + 5#px} color: #white font: font("SansSerif", 16, #bold);
                    draw type at: { 50#px, y + 5#px} color: #white font: font("SansSerif", 16, #bold);
                    y <- y + 25#px;
                }
            }    
   		 }
    }
}



