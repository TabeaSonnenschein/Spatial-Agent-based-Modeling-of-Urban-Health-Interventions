################## loading the census datasets and if necessary subselecting relevant parts #################################
allDataMetafolder = "C:/Users/Tabea/Documents/PhD EXPANSE/Data/Amsterdam/Population"
setwd(paste(allDataMetafolder, "/CBS statistics", sep = ""))
setwd("C:/Dokumente/PhD EXPANSE/Data/Amsterdam/Population/CBS statistics/socioeconomics")
setwd(paste(allDataMetafolder, "/CBS statistics/socioeconomics", sep = ""))
income_stats = read.csv("income by gender and age.csv")
View(income_stats)
personal_attributes = read.csv("personal_attributes.csv")
colnames(personal_attributes)[1] = "Persoonskenmerken"
income_stats = merge(income_stats, personal_attributes, by= "Persoonskenmerken", all.x = T, all.y = F)
income_stats$Personen_1
Inc_stats = create_stratified_prob_table(nested_cond_attr_list = list(c("Leeftijd: 0 tot 15 jaar" ,"Leeftijd: 15 tot 25 jaar", "Leeftijd: 25 tot 45 jaar" ,
"Leeftijd: 45 tot 65 jaar" , "Leeftijd: 65 jaar of ouder"),
c("Migratieachtergrond: Nederland" , "Migratieachtergrond: westers", "Migratieachtergrond: niet-westers")),
column_names = c("age_group", "migrationbackground"), var_for_pred = c("PersonenMetPersoonlijkInkomen_2"), total_population = "Personen_1",
orig_df = income_stats, strat_var = "Title")
calc_propens_agents = function(dataframe, variable, total_population, agent_df, list_conditional_var){
if(!missing(total_population)){
dataframe[,c(paste("prop_",variable, sep = ""))] = dataframe[,c(variable)]/dataframe[, c(total_population)]
}
order_agent_df = colnames(agent_df)
if(paste("prop_",variable, sep = "") %in% order_agent_df){
x = which(order_agent_df == paste("prop_",variable, sep = ""))
agent_df = subset(agent_df, select = -c(x))
}
agent_df = merge(agent_df, dataframe[,c(list_conditional_var, paste("prop_",variable, sep = ""))], all.x = T, all.y= F, by = list_conditional_var)
agent_df = agent_df[,c(order_agent_df, paste("prop_",variable, sep = ""))]
random_seq = sample(nrow(agent_df))
agent_df = agent_df[random_seq,]
return(agent_df)
}
create_stratified_prob_table = function(nested_cond_attr_list, column_names, orig_df, strat_var, var_for_pred, total_population){
ncondVar = length(column_names)
attr_length = c()
for(i in 1:ncondVar){
attr_length = append(attr_length, length(nested_cond_attr_list[[i]]))
}
new_strat_df = as.data.frame(matrix(nrow = prod(attr_length), ncol = (ncondVar + length(var_for_pred))))
for(i in 1:ncondVar){
if(i == ncondVar){
new_strat_df[,i] = rep(nested_cond_attr_list[[i]], times =  (prod(attr_length)/attr_length[i]))
}
else{
var_comb = c()
for(n in 1:attr_length[i]){
var_comb = append(var_comb, rep(nested_cond_attr_list[[i]][n], times = prod(attr_length[(i+1):ncondVar])))
}
new_strat_df[,i] = rep(var_comb, times = prod(attr_length)/prod(attr_length[(i):ncondVar]))
}
}
colnames(new_strat_df) = c(column_names, paste("prop_",var_for_pred, sep = ""))
if(missing(total_population)){
for(i in 1:nrow(new_strat_df)){
for(n in 1:length(var_for_pred)){
new_strat_df[i,n+ncondVar] = sum(orig_df[which(orig_df[,c(strat_var)] %in% c(new_strat_df[i,1:ncondVar])),c(var_for_pred[n])])/ncondVar
}
}
}
else{
for(i in 1:length(var_for_pred)){
orig_df[,c(paste("prop_",var_for_pred[i], sep = ""))] = orig_df[,c(var_for_pred[i])]/orig_df[, c(total_population)]
}
for(i in 1:nrow(new_strat_df)){
for(n in 1:length(var_for_pred)){
new_strat_df[i,n+ncondVar] = sum(orig_df[which(orig_df[,c(strat_var)] %in% c(new_strat_df[i,1:ncondVar])),c(paste("prop_",var_for_pred[n], sep = ""))])/ncondVar
}
}
}
return(new_strat_df)
}
Inc_stats = create_stratified_prob_table(nested_cond_attr_list = list(c("Leeftijd: 0 tot 15 jaar" ,"Leeftijd: 15 tot 25 jaar", "Leeftijd: 25 tot 45 jaar" ,
"Leeftijd: 45 tot 65 jaar" , "Leeftijd: 65 jaar of ouder"),
c("Migratieachtergrond: Nederland" , "Migratieachtergrond: westers", "Migratieachtergrond: niet-westers")),
column_names = c("age_group", "migrationbackground"), var_for_pred = c("PersonenMetPersoonlijkInkomen_2"), total_population = "Personen_1",
orig_df = income_stats, strat_var = "Title")
View(Inc_stats)
library(GenSynthPop)
?calc_propens_agents
library(GenSynthPop)
library(GenSynthPop)
neigh_df = as.data.frame(1:10)
colnames(neigh_df) = c("neigh_ID")
# we call our age_groups A1, A2, A3, but it can be any number of classes with any name
neigh_df$A1 = sample(x=1:50, size=10)
View(neigh_df)
neigh_df$A1 = sample(x=1:20, size=10)
neigh_df$A2 = sample(x=1:20, size=10)
neigh_df$A3 = 50- (neigh_df$A1 + neigh_df$A2)
#' # neigh_df mock data
#' # the total population (sum of all agegroups across all neighborhoods) has to be equal to the length of the agent_df
#' neigh_df = as.data.frame(1:10)
#' colnames(neigh_df) = c("neigh_ID")
#' # we call our age_groups A1, A2, A3, but it can be any number of classes with any name
#' neigh_df$A1 = sample(x=1:20, size=10)
#' neigh_df$A2 = sample(x=1:20, size=10)
#' neigh_df$A3 = 50- (neigh_df$A1 + neigh_df$A2)
#'
#'
distr_agent_neigh_age_group = function(neigh_df, agent_df, neigh_id, age_col_names){
agent_df$age_group = ""
agent_df[,c(neigh_id)] = ""
n = 0 # indice of agent population that is populated with attributes
for(i in 1:nrow(neigh_df)){   # neighborhood indice
for(g in age_col_names) {            # agegroup indice
nr_people = neigh_df[i, c(g)]
agent_df$age_group[(n+1):(n+nr_people)] = g
agent_df[(n+1):(n+nr_people), c(neigh_id)] = neigh_df[i, c(neigh_id)]
n = n + nr_people
}
}
}
agent_df= distr_agent_neigh_age_group(neigh_df = neigh_df. agent_df = agent_df, neigh_id = "neigh_ID", age_colnames = c("A1", "A2", "A3"))
#agent_df mock data
agent_df = as.data.frame(paste("Agent_",1:500, sep=""))
colnames(agent_df) = "agent_ID"
# neigh_df mock data
# the total population (sum of all agegroups across all neighborhoods) has to be equal to the length of the agent_df
neigh_df = as.data.frame(1:10)
colnames(neigh_df) = c("neigh_ID")
# we call our age_groups A1, A2, A3, but it can be any number of classes with any name
neigh_df$A1 = sample(x=1:20, size=10)
neigh_df$A2 = sample(x=1:20, size=10)
neigh_df$A3 = 50- (neigh_df$A1 + neigh_df$A2)
#function application
agent_df= distr_agent_neigh_age_group(neigh_df = neigh_df. agent_df = agent_df, neigh_id = "neigh_ID", age_colnames = c("A1", "A2", "A3"))
agent_df= distr_agent_neigh_age_group(neigh_df = neigh_df, agent_df = agent_df, neigh_id = "neigh_ID", age_colnames = c("A1", "A2", "A3"))
#' # the total population (sum of all agegroups across all neighborhoods) has to be equal to the length of the agent_df
#' neigh_df = as.data.frame(1:10)
#' colnames(neigh_df) = c("neigh_ID")
#' # we call our age_groups A1, A2, A3, but it can be any number of classes with any name
#' neigh_df$A1 = sample(x=1:20, size=10)
#' neigh_df$A2 = sample(x=1:20, size=10)
#' neigh_df$A3 = 50- (neigh_df$A1 + neigh_df$A2)
#'
#' #function application
#' agent_df= distr_agent_neigh_age_group(neigh_df = neigh_df, agent_df = agent_df, neigh_id = "neigh_ID", age_colnames = c("A1", "A2", "A3"))
distr_agent_neigh_age_group = function(neigh_df, agent_df, neigh_id, age_colnames){
agent_df$age_group = ""
agent_df[,c(neigh_id)] = ""
n = 0 # indice of agent population that is populated with attributes
for(i in 1:nrow(neigh_df)){   # neighborhood indice
for(g in age_colnames) {            # agegroup indice
nr_people = neigh_df[i, c(g)]
agent_df$age_group[(n+1):(n+nr_people)] = g
agent_df[(n+1):(n+nr_people), c(neigh_id)] = neigh_df[i, c(neigh_id)]
n = n + nr_people
}
}
}
agent_df= distr_agent_neigh_age_group(neigh_df = neigh_df, agent_df = agent_df, neigh_id = "neigh_ID", age_colnames = c("A1", "A2", "A3"))
agent_df = as.data.frame(paste("Agent_",1:500, sep=""))
colnames(agent_df) = "agent_ID"
# neigh_df mock data
# the total population (sum of all agegroups across all neighborhoods) has to be equal to the length of the agent_df
neigh_df = as.data.frame(1:10)
colnames(neigh_df) = c("neigh_ID")
# we call our age_groups A1, A2, A3, but it can be any number of classes with any name
neigh_df$A1 = sample(x=1:20, size=10)
neigh_df$A2 = sample(x=1:20, size=10)
neigh_df$A3 = 50- (neigh_df$A1 + neigh_df$A2)
View(neigh_df)
#' # the total population (sum of all agegroups across all neighborhoods) has to be equal to the length of the agent_df
#' neigh_df = as.data.frame(1:10)
#' colnames(neigh_df) = c("neigh_ID")
#' # we call our age_groups A1, A2, A3, but it can be any number of classes with any name
#' neigh_df$A1 = sample(x=1:20, size=10)
#' neigh_df$A2 = sample(x=1:20, size=10)
#' neigh_df$A3 = 50- (neigh_df$A1 + neigh_df$A2)
#'
#' #function application
#' agent_df= distr_agent_neigh_age_group(neigh_df = neigh_df, agent_df = agent_df, neigh_id = "neigh_ID", age_colnames = c("A1", "A2", "A3"))
distr_agent_neigh_age_group = function(neigh_df, agent_df, neigh_id, age_colnames){
agent_df$age_group = ""
agent_df[,c(neigh_id)] = ""
n = 0 # indice of agent population that is populated with attributes
for(i in 1:nrow(neigh_df)){   # neighborhood indice
for(g in age_colnames) {            # agegroup indice
nr_people = neigh_df[i, c(g)]
agent_df$age_group[(n+1):(n+nr_people)] = g
agent_df[(n+1):(n+nr_people), c(neigh_id)] = neigh_df[i, c(neigh_id)]
n = n + nr_people
}
}
return(agent_df)
}
agent_df= distr_agent_neigh_age_group(neigh_df = neigh_df, agent_df = agent_df, neigh_id = "neigh_ID", age_colnames = c("A1", "A2", "A3"))
View(agent_df)
#' # the total population (sum of all agegroups across all neighborhoods) has to be equal to the length of the agent_df
#' neigh_df = as.data.frame(1:10)
#' colnames(neigh_df) = c("neigh_ID")
#' # we call our age_groups A1, A2, A3, but it can be any number of classes with any name
#' neigh_df$A1 = sample(x=1:20, size=10)
#' neigh_df$A2 = sample(x=1:20, size=10)
#' neigh_df$A3 = 50- (neigh_df$A1 + neigh_df$A2)
#'
#' #function application
#' agent_df= distr_agent_neigh_age_group(neigh_df = neigh_df, agent_df = agent_df, neigh_id = "neigh_ID", age_colnames = c("A1", "A2", "A3"))
distr_agent_neigh_age_group = function(neigh_df, agent_df, neigh_id, age_colnames){
agent_df$age_group = ""
agent_df[,c(neigh_id)] = ""
n = 0 # indice of agent population that is populated with attributes
for(i in 1:nrow(neigh_df)){   # neighborhood indice
for(g in age_colnames) {            # agegroup indice
nr_people = neigh_df[i, c(g)]
agent_df$age_group[(n+1):(n+nr_people)] = g
agent_df[(n+1):(n+nr_people), c(neigh_id)] = neigh_df[i, c(neigh_id)]
n = n + nr_people
}
}
random_seq = sample(nrow(agent_df))
agent_df = agent_df[random_seq,]
return(agent_df)
}
agent_df = as.data.frame(paste("Agent_",1:500, sep=""))
colnames(agent_df) = "agent_ID"
agent_df= distr_agent_neigh_age_group(neigh_df = neigh_df, agent_df = agent_df, neigh_id = "neigh_ID", age_colnames = c("A1", "A2", "A3"))
View(agent_df)
library(GenSynthPop)
?distr_agent_neigh_age_group
#mock data
#agent_df mock data
agent_df = as.data.frame(paste("Agent_",1:500, sep=""))
colnames(agent_df) = "agent_ID"
library(GenSynthPop)
# check out the function documentation
?gen_agent_df
?distr_agent_neigh_age_group
?crosstabular_to_singleside_df
?restructure_one_var_marginal
?strat_prop_from_sep_cond_var
?distr_attr_cond_prop
?distr_agent_neigh_age_group       #
?crosstabular_to_singleside_df
?restructure_one_var_marginal        #
?strat_prop_from_sep_cond_var        #
?distr_attr_strat_neigh_stats_binary #
?distr_attr_strat_neigh_stats_binary #distribute attributes based on conditional propensities and neighborhood totals (binary attributes)
?distr_attr_strat_neigh_stats_3plus
?crossvalid
varclass_harmonization = function(df, orig_colname, nested_list_values, list_replacement_values, new_col_name){
df[,c(new_col_name)] = NA
for(i in 1:len(list_replacement_values)){
df[df[,c(orig_colname)] %in% nested_list_values[i]] = list_replacement_values[i]
}
}
View(varclass_harmonization)
age_group = rep(c("A1", "A2", "A3", "A4", "A5", "A6"), 6)
sex = rep(c("male", "female", "non-binary"), each = 6)
sex = rep(c("male", "female", "non-binary"), each = 12)
employ_status = rep(c("employed", "unemployed"), each = 12)
employ_status = rep(c("employed", "unemployed"), each = 18)
counts = sample(1:400,length(age_group))
singleside_stratified_df = data.frame(age_group, sex , employ_status, counts)
View(singleside_stratified_df)
age_group = rep(c("A1", "A2", "A3", "A4", "A5", "A6"), 6)
employ_status = rep(rep(c("employed", "unemployed"), each = 6), 2)
employ_status = rep(rep(c("employed", "unemployed"), each = 6), 3)
age_group = rep(c("A1", "A2", "A3", "A4", "A5", "A6"), 6)
sex = rep(c("male", "female", "non-binary"), each = 12)
age_group = rep(c("A1", "A2", "A3", "A4", "A5", "A6"), 6)
sex = rep(c("male", "female", "non-binary"), each = 12)
employ_status = rep(rep(c("employed", "unemployed"), each = 6), 3)
counts = sample(1:400,length(age_group))
singleside_stratified_df = data.frame(age_group, sex , employ_status, counts)
age_group = rep(c("A1", "A2", "A3", "A4"), 6)
sex = rep(c("male", "female", "non-binary"), each = 4)
employ_status = rep(c("employed", "unemployed"), each = 12)
age_group = rep(c("A1", "A2", "A3", "A4"), 6)
sex = rep(c("male", "female", "non-binary"), each = 8)
employ_status = rep(rep(c("employed", "unemployed"), each = 4),3)
counts = sample(1:400,length(age_group))
singleside_stratified_df = data.frame(age_group, sex , employ_status, counts)
View(singleside_stratified_df)
age_group = rep(c("A1", "A2", "A3", "A4"),3)
sex = rep(c("male", "female", "non-binary"), each = 4)
employed = sample(1:400,length(age_group))
unemployed = sample(1:400,length(age_group))
total_pop = employed + unemployed
stratified_df = data.frame(age_group, sex , employed, unemployed, total_pop)
View(stratified_df)
age_group = rep(c("A1", "A2", "A3", "A4"), 6)
sex = rep(c("male", "female", "non-binary"), each = 8)
employ_status = rep(rep(c("employed", "unemployed"), each = 4),3)
counts = sample(1:400,length(age_group))
singleside_stratified_df = data.frame(age_group, sex , employ_status, counts)
View(singleside_stratified_df)
age_group = rep(c("A1", "A2", "A3", "A4", "A5", "A6"), 6)
sex = rep(c("male", "female", "non-binary"), each = 12)
employ_status = rep(rep(c("employed", "unemployed"), each = 6), 3)
counts = sample(1:400,length(age_group))
singleside_stratified_df = data.frame(age_group, sex , employ_status, counts)
View(singleside_stratified_df)
singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df,
orig_colname = "age_group",
list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"),
nested_list_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9))
new_col_name = "age_group_otherdf")
singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df,
orig_colname = "age_group",
list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"),
nested_list_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9)),
new_col_name = "age_group_otherdf")
singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df,
orig_colname = "age_group",
list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"),
nested_list_corr_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9)),
new_col_name = "age_group_otherdf")
singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df, orig_colname = "age_group",
list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"),
nested_list_corr_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9)),
new_col_name = "age_group_otherdf")
View(singleside_stratified_df)
singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df, orig_colname = "age_group", list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"), nested_list_corr_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9)), new_col_name = "age_group_otherdf")
#' age_group = rep(c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9"), 6)
#' sex = rep(c("male", "female", "non-binary"), each = 12)
#' employ_status = rep(rep(c("employed", "unemployed"), each = 6), 3)
#' counts = sample(1:400,length(age_group))
#' singleside_stratified_df = data.frame(age_group, sex , employ_status, counts)
#'
#' # let us say we have another dataframe that we want to harmonize
#' # and their unique classes for age are "0-19", "20-39", "40-59", "60-79","80plus"
#' # we know that in the singleside_stratified_df that corresponds to list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9))
#' singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df, orig_colname = "age_group", list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"), nested_list_corr_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9)), new_col_name = "age_group_otherdf")
varclass_harmonization = function(df, orig_colname, list_other_df_classes, nested_list_corr_values, new_col_name){
df[,c(new_col_name)] = NA
for(i in 1:len(list_other_df_classes)){
df[df[,c(orig_colname)] %in% nested_list_corr_values[i], c(new_col_name)] = list_other_df_classes[i]
}
}
singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df, orig_colname = "age_group", list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"), nested_list_corr_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9)), new_col_name = "age_group_otherdf")
singleside_stratified_df[,c("age_group_otherdf")] = NA
View(singleside_stratified_df)
list_other_df_classes = c("0-19", "20-39", "40-59", "60-79","80plus")
nested_list_corr_values=  list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9))
singleside_stratified_df[,c("age_group_otherdf")] = NA
for(i in 1:len(list_other_df_classes)){
df[df[,c(orig_colname)] %in% nested_list_corr_values[i], c(new_col_name)] = list_other_df_classes[i]
}
nested_list_corr_values=  list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9))
singleside_stratified_df[,c("age_group_otherdf")] = NA
for(i in 1:len(list_other_df_classes)){
df[df[,c(orig_colname)] %in% nested_list_corr_values[i], c(new_col_name)] = list_other_df_classes[i]
singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df, orig_colname = "age_group", list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"), nested_list_corr_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9")), new_col_name = "age_group_otherdf")
list_other_df_classes = c("0-19", "20-39", "40-59", "60-79","80plus")
nested_list_corr_values=  list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9"))
singleside_stratified_df[,c("age_group_otherdf")] = NA
singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df, orig_colname = "age_group", list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"), nested_list_corr_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9")), new_col_name = "age_group_otherdf")
#' age_group = rep(c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9"), 6)
#' sex = rep(c("male", "female", "non-binary"), each = 12)
#' employ_status = rep(rep(c("employed", "unemployed"), each = 6), 3)
#' counts = sample(1:400,length(age_group))
#' singleside_stratified_df = data.frame(age_group, sex , employ_status, counts)
#'
#' # let us say we have another dataframe that we want to harmonize
#' # and their unique classes for age are "0-19", "20-39", "40-59", "60-79","80plus"
#' # we know that in the singleside_stratified_df that corresponds to list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9))
#' singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df, orig_colname = "age_group", list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"), nested_list_corr_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9")), new_col_name = "age_group_otherdf")
varclass_harmonization = function(df, orig_colname, list_other_df_classes, nested_list_corr_values, new_col_name){
df[,c(new_col_name)] = NA
for(i in 1:length(list_other_df_classes)){
df[df[,c(orig_colname)] %in% nested_list_corr_values[i], c(new_col_name)] = list_other_df_classes[i]
}
}
singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df, orig_colname = "age_group", list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"), nested_list_corr_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9")), new_col_name = "age_group_otherdf")
#' age_group = rep(c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9"), 6)
#' sex = rep(c("male", "female", "non-binary"), each = 12)
#' employ_status = rep(rep(c("employed", "unemployed"), each = 6), 3)
#' counts = sample(1:400,length(age_group))
#' singleside_stratified_df = data.frame(age_group, sex , employ_status, counts)
#'
#' # let us say we have another dataframe that we want to harmonize
#' # and their unique classes for age are "0-19", "20-39", "40-59", "60-79","80plus"
#' # we know that in the singleside_stratified_df that corresponds to list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9))
#' singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df, orig_colname = "age_group", list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"), nested_list_corr_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9")), new_col_name = "age_group_otherdf")
varclass_harmonization = function(df, orig_colname, list_other_df_classes, nested_list_corr_values, new_col_name){
df[,c(new_col_name)] = NA
for(i in 1:length(list_other_df_classes)){
df[df[,c(orig_colname)] %in% nested_list_corr_values[i], c(new_col_name)] = list_other_df_classes[i]
}
return(df)
}
age_group = rep(c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9"), 6)
sex = rep(c("male", "female", "non-binary"), each = 12)
employ_status = rep(rep(c("employed", "unemployed"), each = 6), 3)
counts = sample(1:400,length(age_group))
singleside_stratified_df = data.frame(age_group, sex , employ_status, counts)
# let us say we have another dataframe that we want to harmonize
# and their unique classes for age are "0-19", "20-39", "40-59", "60-79","80plus"
# we know that in the singleside_stratified_df that corresponds to list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9))
singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df, orig_colname = "age_group", list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"), nested_list_corr_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9")), new_col_name = "age_group_otherdf")
View(stratified_df)
singleside_stratified_df[,c("age_group_otherdf")] = NA
singleside_stratified_df[,c("age_group_otherdf")] = ""
age_group = rep(c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9"), 6)
sex = rep(c("male", "female", "non-binary"), each = 12)
employ_status = rep(rep(c("employed", "unemployed"), each = 6), 3)
counts = sample(1:400,length(age_group))
singleside_stratified_df = data.frame(age_group, sex , employ_status, counts)
employ_status = rep(rep(c("employed", "unemployed"), each = 9), 3)
sex = rep(c("male", "female", "non-binary"), each = 18)
age_group = rep(c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9"), 6)
sex = rep(c("male", "female", "non-binary"), each = 18)
employ_status = rep(rep(c("employed", "unemployed"), each = 9), 3)
counts = sample(1:400,length(age_group))
singleside_stratified_df = data.frame(age_group, sex , employ_status, counts)
# let us say we have another dataframe that we want to harmonize
# and their unique classes for age are "0-19", "20-39", "40-59", "60-79","80plus"
# we know that in the singleside_stratified_df that corresponds to list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9))
singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df, orig_colname = "age_group", list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"), nested_list_corr_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9")), new_col_name = "age_group_otherdf")
View(singleside_stratified_df)
nested_list_corr_values=  list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9"))
View(nested_list_corr_values)
nested_list_corr_values[1]
nested_list_corr_values[5]
nested_list_corr_values[1][1]
nested_list_corr_values[1]
nested_list_corr_values[[1]][1]
length(nested_list_corr_values[1])
length(nested_list_corr_values[[1]])
#' sex = rep(c("male", "female", "non-binary"), each = 18)
#' employ_status = rep(rep(c("employed", "unemployed"), each = 9), 3)
#' counts = sample(1:400,length(age_group))
#' singleside_stratified_df = data.frame(age_group, sex , employ_status, counts)
#'
#' # let us say we have another dataframe that we want to harmonize
#' # and their unique classes for age are "0-19", "20-39", "40-59", "60-79","80plus"
#' # we know that in the singleside_stratified_df that corresponds to list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9))
#' singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df, orig_colname = "age_group", list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"), nested_list_corr_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9")), new_col_name = "age_group_otherdf")
#'
varclass_harmonization = function(df, orig_colname, list_other_df_classes, nested_list_corr_values, new_col_name){
df[,c(new_col_name)] = NA
for(i in 1:length(list_other_df_classes)){
for(x in 1:length(nested_list_corr_values[[i]])){
df[df[,c(orig_colname)] %in% nested_list_corr_values[[i]][x], c(new_col_name)] = list_other_df_classes[i]
}
}
return(df)
}
age_group = rep(c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9"), 6)
sex = rep(c("male", "female", "non-binary"), each = 18)
employ_status = rep(rep(c("employed", "unemployed"), each = 9), 3)
counts = sample(1:400,length(age_group))
singleside_stratified_df = data.frame(age_group, sex , employ_status, counts)
singleside_stratified_df = varclass_harmonization(df = singleside_stratified_df, orig_colname = "age_group", list_other_df_classes = c( "0-19", "20-39", "40-59", "60-79","80plus"), nested_list_corr_values = list(c("A1", "A2"), c("A3", "A4"), c("A5", "A6"), c("A7", "A8"), c("A9")), new_col_name = "age_group_otherdf")
library(GenSynthPop)
?varclass_harmonization
?seq_along
aggreg_stratdata_for_harmonclasses = function(df, harmon_var_col, former_var_col, marg_dist_collist ){
classes = unique(df[,c(harmon_var_col)])
columns = colnames(df)[(colnames(df) != former_var_col) & !(colnames(df) %in% marg_dist_collist)]
df_new = unique(df[,c(columns)])
df_new[,c(marg_dist_collist)] = NA
for(i in seq_along(df_new[,c(harmon_var_col)])){
for( x in marg_dist_collist){
df_new[i, c(x)] = sum(df[df[,c(harmon_var_col)] == df_new[,c(harmon_var_col)][i], c(x)])
}
}
}
library(GenSynthPop)
library(GenSynthPop)
?aggreg_stratdata_in_harmonclasses
?aggreg_stratdata_in_harmonclasses   #Aggregating a stratified dataset into the newly added harmonised classes
