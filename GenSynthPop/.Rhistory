len_colvar_combi = nrow(df) - nrow_var # how many classes of the column variables are there
df_len = len_rowvar_combi * len_colvar_combi
df_colvar = as.data.frame(df[(nrow_var+1):nrow(df),1:ncol_var])
colnames(df_colvar) = col_var_names
df_new = df_colvar
for(i in 1:(len_rowvar_combi-1)){
df_new = rbind(df_new, df_colvar)
}
for(x in row_var_names){
df_new[,c(x)] = ""
}
df_new$counts = NA
print(nrow(df_new))
for(i in 1:len_rowvar_combi){
# print(i)
# print(nrow(df_new))
for(x in (1:len_colvar_combi)){
df_new[((i-1)*len_colvar_combi)+x,c(row_var_names)]=df[1:nrow_var,i+ncol_var]
}
df_new[((i-1)*len_colvar_combi)+1:(i*len_colvar_combi),c("counts")] = df[(1+nrow_var):(len_colvar_combi+nrow_var),i+ncol_var]
}
return(df_new[1:df_len,])
}
# this function restructures the dataframe so that the classes of one column/variable are seperate columns
restructure_one_var_marginal = function(df, variable, countsname){
classes = unique(df[,c(variable)])
restColumns = colnames(df)[(colnames(df) != variable) & (colnames(df) != countsname)]
df_new = unique(as.data.frame(df[, c(restColumns)]))
colnames(df_new) = restColumns
for(x in classes){
df_new[, c(x)] = as.numeric(df[df[,c(variable)] == x, c(countsname)])
}
df_new[,c("total")] = rowSums(df_new[,c(classes)])
return(df_new)
}
gen_agent_df = function(pop_size){
agent_ID = paste("Agent_",1:pop_size, sep="")
agent_df = as.data.frame(agent_ID)
return(agent_df)
}
calc_propens_agents = function(dataframe, variable, total_population, agent_df, list_conditional_var){
if(!missing(total_population)){
dataframe[,c(paste("prop_",variable, sep = ""))] = dataframe[,c(variable)]/dataframe[, c(total_population)]
}
order_agent_df = colnames(agent_df)
if(paste("prop_",variable, sep = "") %in% order_agent_df){
x = which(order_agent_df == paste("prop_",variable, sep = ""))
agent_df = subset(agent_df, select = -c(x))
}
agent_df = merge(agent_df, dataframe[,c(list_conditional_var, paste("prop_",variable, sep = ""))], all.x = T, all.y= F, by = list_conditional_var)
agent_df = agent_df[,c(order_agent_df, paste("prop_",variable, sep = ""))]
random_seq = sample(nrow(agent_df))
agent_df = agent_df[random_seq,]
return(agent_df)
}
create_stratified_prob_table = function(nested_cond_attr_list, column_names, orig_df, strat_var, var_for_pred, total_population){
ncondVar = length(column_names)
attr_length = c()
for(i in 1:ncondVar){
attr_length = append(attr_length, length(nested_cond_attr_list[[i]]))
}
new_strat_df = as.data.frame(matrix(nrow = prod(attr_length), ncol = (ncondVar + length(var_for_pred))))
for(i in 1:ncondVar){
if(i == ncondVar){
new_strat_df[,i] = rep(nested_cond_attr_list[[i]], times =  (prod(attr_length)/attr_length[i]))
}
else{
var_comb = c()
for(n in 1:attr_length[i]){
var_comb = append(var_comb, rep(nested_cond_attr_list[[i]][n], times = prod(attr_length[(i+1):ncondVar])))
}
new_strat_df[,i] = rep(var_comb, times = prod(attr_length)/prod(attr_length[(i):ncondVar]))
}
}
colnames(new_strat_df) = c(column_names, paste("prop_",var_for_pred, sep = ""))
if(missing(total_population)){
for(i in 1:nrow(new_strat_df)){
for(n in 1:length(var_for_pred)){
new_strat_df[i,n+ncondVar] = sum(orig_df[which(orig_df[,c(strat_var)] %in% c(new_strat_df[i,1:ncondVar])),c(var_for_pred[n])])/ncondVar
}
}
}
else{
for(i in 1:length(var_for_pred)){
orig_df[,c(paste("prop_",var_for_pred[i], sep = ""))] = orig_df[,c(var_for_pred[i])]/orig_df[, c(total_population)]
}
for(i in 1:nrow(new_strat_df)){
for(n in 1:length(var_for_pred)){
new_strat_df[i,n+ncondVar] = sum(orig_df[which(orig_df[,c(strat_var)] %in% c(new_strat_df[i,1:ncondVar])),c(paste("prop_",var_for_pred[n], sep = ""))])/ncondVar
}
}
}
return(new_strat_df)
}
distr_bin_attr_strat_n_neigh_stats = function(agent_df, neigh_df, neigh_ID, variable, list_var_classes_neigh_df, list_agent_propens, list_class_names, agent_exclude){
print(Sys.time())
agent_df[, c(variable, "random_scores")] = 0
if(missing(list_class_names)){
list_class_names = list_var_classes_neigh_df
}
if(!missing(agent_exclude)){
agent_df[, c("excluded")] = 0
for(i in 1:length(agent_exclude)){
agent_df[which(agent_df[, c(agent_exclude[i])] == 1) , c("excluded")] =  1
}
}
for (i in 1:nrow(neigh_df)){
if(!missing(agent_exclude)){
x = which(agent_df[, c(neigh_ID)] == neigh_df[i, c(neigh_ID)] & agent_df[, c("excluded")] != 1)
}
else{
x = which(agent_df[, c(neigh_ID)] == neigh_df[i, c(neigh_ID)])
}
tot__var_class_neigh = neigh_df[i, list_var_classes_neigh_df]
agent_df[x, c("random_scores")] = sample(x= seq(from= 0, to = 1, by= 0.01), size = length(x), replace = T)
fitness = 0
if(length(x) != 0){
while(fitness == 0){
if(length(list_var_classes_neigh_df)== 2){
agent_df[x[which(agent_df[x, c(list_agent_propens[1])] >= agent_df[x,c("random_scores")])], c(variable)] = list_class_names[1]
agent_df[x[which(agent_df[x, c(list_agent_propens[1])] < agent_df[x,c("random_scores")])], c(variable)] = list_class_names[2]
if(length(which(agent_df[x, c(variable)] == list_class_names[1])) >= tot__var_class_neigh[1] & length(which(agent_df[x, c(variable)] == list_class_names[2])) >= tot__var_class_neigh[2]){
fitness = 1
}
else if(sum(tot__var_class_neigh) <= length(x)){
agent_df[x, c("random_scores")] = sample(x= seq(from= 0, to = 1, by= 0.01), size = length(x), replace = T)
agent_df[x[which(agent_df[x, c(list_agent_propens[1])] >= agent_df[x,c("random_scores")])], c(variable)] = list_class_names[1]
agent_df[x[which(agent_df[x, c(list_agent_propens[1])] < agent_df[x,c("random_scores")])], c(variable)] = list_class_names[2]
if(length(which(agent_df[x, c(variable)] == list_class_names[1])) >= tot__var_class_neigh[1] & length(which(agent_df[x, c(variable)] == list_class_names[2])) >= tot__var_class_neigh[2]){
fitness = 1
}
else if(length(which(agent_df[x, c(variable)] == list_class_names[1])) < tot__var_class_neigh[1]){
abs_diff = as.integer(as.numeric(tot__var_class_neigh[1]) - length(which(agent_df[x, c(variable)] == list_class_names[1])))
if(abs_diff <= 1|is.na(abs_diff)){
fitness = 1
}
else{
class = which(agent_df[x, c(variable)] == list_class_names[2])[1:as.numeric(abs_diff)]
class = class[!is.na(class)]
if(length(class) == 0){
fitness = 1
}
agent_df[x[class], c(list_agent_propens[1])] = agent_df[x[class], c(list_agent_propens[1])] + 0.5
}
}
else if(length(which(agent_df[x, c(variable)] == list_class_names[2])) < tot__var_class_neigh[2]){
abs_diff = as.integer(as.numeric(tot__var_class_neigh[2]) - length(which(agent_df[x, c(variable)] == list_class_names[2])))
if(abs_diff <= 1|is.na(abs_diff)){
fitness = 1
}
else{
class = which(agent_df[x, c(variable)] == list_class_names[1])[1:as.numeric(abs_diff)]
class = class[!is.na(class)]
if(length(class) == 0){
fitness = 1
}
agent_df[x[class], c(list_agent_propens[1])] = agent_df[x[class], c(list_agent_propens[1])] - 0.5
}
}
}
else if(length(x) < 10){
fitness = 1
}
else if(sum(tot__var_class_neigh) > length(x)){
percent_diff1 = length(which(agent_df[x, c(variable)] == list_class_names[1]))/as.numeric(tot__var_class_neigh[1])
percent_diff2 = length(which(agent_df[x, c(variable)] == list_class_names[2]))/as.numeric(tot__var_class_neigh[2])
percent_diff_diff = percent_diff1 - percent_diff2
if(abs(percent_diff_diff) < 0.02|is.na(percent_diff_diff)){
fitness = 1
}
else{
if( percent_diff_diff < 0){
abs_diff = as.integer((((as.numeric(abs(percent_diff_diff)))/2) * as.numeric(tot__var_class_neigh[1]))/3)
if(abs_diff <= 1|is.na(abs_diff)){
fitness = 1
}
else{
class = which(agent_df[x, c(variable)] == list_class_names[2])[1:abs_diff]
class = class[!is.na(class)]
if(length(class) == 0){
fitness = 1
}
agent_df[x[class], c(list_agent_propens[1])] = agent_df[x[class], c(list_agent_propens[1])] + 0.3
}
}
else{
abs_diff = as.integer((((as.numeric(abs(percent_diff_diff)))/2) * as.numeric(tot__var_class_neigh[2]))/3)
if(abs_diff <= 1|is.na(abs_diff)){
fitness = 1
}
else{
class = which(agent_df[x, c(variable)] == list_class_names[1])[1:abs_diff]
class = class[!is.na(class)]
if(length(class) == 0){
fitness = 1
}
agent_df[x[class], c(list_agent_propens[1])] = agent_df[x[class], c(list_agent_propens[1])] - 0.3
}
}
}
}
}
}
}
print(paste("neighborhood:", i))
}
random_seq = sample(nrow(agent_df))
agent_df = agent_df[random_seq,]
print(Sys.time())
return(agent_df)
}
## distr_attr_strat_n_neigh_statsis for attributes with three or more values
distr_attr_strat_n_neigh_stats_3plus = function(agent_df, neigh_df, neigh_ID, variable, list_var_classes_neigh_df, list_agent_propens, list_class_names, agent_exclude){
print(Sys.time())
agent_df[, c(variable, "random_scores")] = 0
if(missing(list_class_names)){
list_class_names = list_var_classes_neigh_df
}
if(!missing(agent_exclude)){
agent_df[, c("excluded")] = 0
for(i in 1:length(agent_exclude)){
agent_df[which(agent_df[, c(agent_exclude[i])] == 1) , c("excluded")] =  1
}
}
lvar = length(list_var_classes_neigh_df)
for (i in 1:nrow(neigh_df)){
if(!missing(agent_exclude)){
x = which(agent_df[, c(neigh_ID)] == neigh_df[i, c(neigh_ID)] & agent_df[, c("excluded")] != 1)
}
else{
x = which(agent_df[, c(neigh_ID)] == neigh_df[i, c(neigh_ID)])
}
tot__var_class_neigh = neigh_df[i, list_var_classes_neigh_df]
agent_df[x, c("random_scores")] = sample(x= seq(from= 0, to = 1, by= 0.01), size = length(x), replace = T)
fitness = 0
if(length(x) != 0){
while(fitness == 0){
if(lvar > 2){
agent_df[x[which(agent_df[x, c(list_agent_propens[1])] >= agent_df[x,c("random_scores")])], c(variable)] = list_class_names[1]
agent_df[x[which(agent_df[x, c(list_agent_propens[1])] < agent_df[x,c("random_scores")] & rowSums(agent_df[x, c(list_agent_propens[1:2])]) >= agent_df[x,c("random_scores")])], c(variable)] = list_class_names[2]
if(lvar >3){
for(n in 3:(lvar -1)){
agent_df[x[which(rowSums(agent_df[x, c(list_agent_propens[1:(n-1)])]) < agent_df[x,c("random_scores")] & rowSums(agent_df[x, c(list_agent_propens[1:n])]) >= agent_df[x,c("random_scores")])], c(variable)] = list_class_names[n]
}
}
agent_df[x[which(rowSums(agent_df[x, c(list_agent_propens[1:(lvar -1)])]) < agent_df[x,c("random_scores")])], c(variable)] = list_class_names[lvar]
if((length(which(agent_df[x, c(variable)] == list_class_names[1])) >= tot__var_class_neigh[1] & length(which(agent_df[x, c(variable)] == list_class_names[2])) >= tot__var_class_neigh[2] & length(which(agent_df[x, c(variable)] == list_class_names[3])) >= tot__var_class_neigh[3]) | sum(tot__var_class_neigh) == 0 | is.na(sum(tot__var_class_neigh))){
fitness = 1
}
else if(sum(tot__var_class_neigh) <= length(x)){
agent_df[x, c("random_scores")] = sample(x= seq(from= 0, to = 1, by= 0.01), size = length(x), replace = T)
agent_df[x[which(agent_df[x, c(list_agent_propens[1])] >= agent_df[x,c("random_scores")])], c(variable)] = list_class_names[1]
agent_df[x[which(agent_df[x, c(list_agent_propens[1])] < agent_df[x,c("random_scores")] & rowSums(agent_df[x, c(list_agent_propens[1:2])]) >= agent_df[x,c("random_scores")])], c(variable)] = list_class_names[2]
if(lvar>3){
for(n in 3:(lvar-1)){
agent_df[x[which(rowSums(agent_df[x, c(list_agent_propens[1:(n-1)])]) < agent_df[x,c("random_scores")] & rowSums(agent_df[x, c(list_agent_propens[1:n])]) >= agent_df[x,c("random_scores")])], c(variable)] = list_class_names[n]
}
}
agent_df[x[which(rowSums(agent_df[x, c(list_agent_propens[1:(lvar -1)])]) < agent_df[x,c("random_scores")])], c(variable)] = list_class_names[lvar]
if(length(which(agent_df[x, c(variable)] == list_class_names[1])) >= tot__var_class_neigh[1] & length(which(agent_df[x, c(variable)] == list_class_names[2])) >= tot__var_class_neigh[2] & length(which(agent_df[x, c(variable)] == list_class_names[3])) >= tot__var_class_neigh[3]){
fitness = 1
}
else{
underrepresented = c()
for(n in 1:(lvar)){
if(length(which(agent_df[x, c(variable)] == list_class_names[n])) < tot__var_class_neigh[n]){
underrepresented = append(underrepresented, 1)
}
else{
underrepresented = append(underrepresented, 0)
}
}
for(n in 1:(lvar)){
if(underrepresented[n] == 1){
abs_diff = (tot__var_class_neigh[n] - length(which(agent_df[x, c(variable)] == list_class_names[n])))
class = which(agent_df[x, c(variable)] %in% list_class_names[which(underrepresented == 0)])[1:as.numeric(abs_diff)]
class = class[!is.na(class)]
agent_df[x[class], c(variable)] = list_class_names[n]
agent_df[x[class], c(list_agent_propens[n])] = agent_df[x[class], c(list_agent_propens[n])] + 0.5
agent_df[x[class], c(list_agent_propens[which(underrepresented == 0)])] = agent_df[x[class], c(list_agent_propens[which(underrepresented == 0)])] - (0.5/length(which(underrepresented == 0)))
}
}
if(length(which(agent_df[x, c(variable)] == list_class_names[1])) >= tot__var_class_neigh[1] & length(which(agent_df[x, c(variable)] == list_class_names[2])) >= tot__var_class_neigh[2] & length(which(agent_df[x, c(variable)] == list_class_names[3])) >= tot__var_class_neigh[3]){
fitness = 1
}
}
}
else if(sum(tot__var_class_neigh) > length(x)){
percent_diff = c()
for(n in 1:(lvar)){
if(tot__var_class_neigh[n] != 0){
percent_diff = append(percent_diff, length(which(agent_df[x, c(variable)] == list_class_names[n]))/as.numeric(tot__var_class_neigh[n]))
}
else{
percent_diff = append(percent_diff, NA)
}
}
print(percent_diff)
percent_diff_diff = as.data.frame(matrix(data = NA, nrow = length(list_var_classes_neigh_df), ncol = length(list_var_classes_neigh_df)))
for(n in 1:(lvar)){
for(k in 1:(lvar)){
percent_diff_diff[n, k] = percent_diff[n] - percent_diff[k]
}
}
if(all(abs(na.omit(percent_diff_diff)) < 0.03)){
fitness = 1
}
else{
tot_abs_diff = c()
for(n in 1:(lvar)){
m = which(percent_diff_diff[n,] < (-0.03))
if(length(m)> 0){
abs_diff = as.numeric(((sum(as.numeric(abs(percent_diff_diff[n, m])))/length(m)) * as.numeric(tot__var_class_neigh[n])))
tot_abs_diff = append(tot_abs_diff, abs_diff )
for(l in m){
class = which(agent_df[x, c(variable)] %in% list_class_names[l])[1:as.integer((abs_diff/3)*(as.numeric(tot__var_class_neigh[l])/sum(as.numeric(tot__var_class_neigh[m]))))]
class = class[!is.na(class)]
agent_df[x[class], c(variable)] = list_class_names[n]
agent_df[x[class], c(list_agent_propens[n])] = agent_df[x[class], c(list_agent_propens[n])] + 0.3
agent_df[x[class], c(list_agent_propens[m])] = agent_df[x[class], c(list_agent_propens[m])] - (0.3/length(m))
}
}
}
if(all(abs(tot_abs_diff) < 3)){
fitness = 1
}
else{
percent_diff = c()
for(n in 1:(lvar)){
if(tot__var_class_neigh[n] != 0){
percent_diff = append(percent_diff, length(which(agent_df[x, c(variable)] == list_class_names[n]))/as.numeric(tot__var_class_neigh[n]))
}
else{
percent_diff = append(percent_diff, NA)
}                }
print(percent_diff)
percent_diff_diff = as.data.frame(matrix(data = NA, nrow = length(list_var_classes_neigh_df), ncol = length(list_var_classes_neigh_df)))
for(n in 1:(lvar)){
for(k in 1:(lvar)){
percent_diff_diff[n, k] = percent_diff[n] - percent_diff[k]
}
}
if(all(abs(na.omit(percent_diff_diff)) < 0.05)){
fitness = 1
}
# else{
#   agent_df[x, c("random_scores")] = sample(x= seq(from= 0, to = 1, by= 0.01), size = length(x), replace = T)
# }
}
}
}
}
else if(lvar == 2){
print("use binary attribute function: distr_bin_attr_strat_n_neigh_stats() ")
}
}
}
print(paste("neighborhood:", i))
}
random_seq = sample(nrow(agent_df))
agent_df = agent_df[random_seq,]
print(Sys.time())
return(agent_df)
}
distr_attr_cond_prop = function(agent_df, variable, list_agent_propens, list_class_names, agent_exclude){
print(Sys.time())
agent_df[, c(variable, "random_scores")] = 0
if(!missing(agent_exclude)){
agent_df[, c("excluded")] = 0
for(i in 1:length(agent_exclude)){
agent_df[which(agent_df[, c(agent_exclude[i])] == 1) , c("excluded")] =  1
}
x = which(agent_df[, c("excluded")] != 1)
}
else{
x = which(agent_df[, c(variable)] == 0)
}
lvar = length(list_class_names)
agent_df[x, c("random_scores")] = sample(x= seq(from= 0, to = 1, by= 0.01), size = length(x), replace = T)
if(lvar == 2){
agent_df[x[which(agent_df[x, c(list_agent_propens[1])] >= agent_df[x,c("random_scores")])], c(variable)] = list_class_names[1]
agent_df[x[which(agent_df[x, c(list_agent_propens[1])] < agent_df[x,c("random_scores")])], c(variable)] = list_class_names[2]
}
else if(lvar > 2){
agent_df[x[which(agent_df[x, c(list_agent_propens[1])] >= agent_df[x,c("random_scores")])], c(variable)] = list_class_names[1]
agent_df[x[which(agent_df[x, c(list_agent_propens[1])] < agent_df[x,c("random_scores")] & rowSums(agent_df[x, c(list_agent_propens[1:2])]) >= agent_df[x,c("random_scores")])], c(variable)] = list_class_names[2]
if(lvar >3){
for(n in 3:(lvar -1)){
agent_df[x[which(rowSums(agent_df[x, c(list_agent_propens[1:(n-1)])]) < agent_df[x,c("random_scores")] & rowSums(agent_df[x, c(list_agent_propens[1:n])]) >= agent_df[x,c("random_scores")])], c(variable)] = list_class_names[n]
}
}
agent_df[x[which(rowSums(agent_df[x, c(list_agent_propens[1:(lvar -1)])]) < agent_df[x,c("random_scores")])], c(variable)] = list_class_names[lvar]
}
random_seq = sample(nrow(agent_df))
agent_df = agent_df[random_seq,]
print(Sys.time())
return(agent_df)
}
crossvalid = function(valid_df, agent_df, join_var, list_valid_var, agent_var, list_agent_attr ){
output = valid_df[,c(join_var, list_valid_var)]
for(i in 1:length(list_agent_attr)){
output[, c(paste("agent_",list_agent_attr[i], sep = ""))]= NA
}
if(length(join_var) > 1){
valid_df$ID = paste("ID",1:nrow(valid_df), sep="")
interm = merge(agent_df[, c(join_var, agent_var)], valid_df[, c(join_var, "ID")], by = join_var, all.x= T, all.y= F)
}
for(n in 1:nrow(output)){
for(i in 1:length(list_agent_attr)){
if(length(join_var) == 1){
output[n, c(paste("agent_",list_agent_attr[i], sep = ""))]= nrow(agent_df[which(agent_df[, c(join_var)] == valid_df[n, c(join_var)] & agent_df[, c(agent_var)] == list_agent_attr[i]),])
output[n, c(paste("diff_",list_agent_attr[i], sep = ""))]= output[n, c(paste("agent_",list_agent_attr[i], sep = ""))] - output[n, c(list_valid_var[i])]
}
else{
output[n, c(paste("agent_",list_agent_attr[i], sep = ""))]= nrow(interm[which(interm[, c("ID")] == valid_df[n, c("ID")] & interm[, c(agent_var)] == list_agent_attr[i]),])
output[n, c(paste("diff_",list_agent_attr[i], sep = ""))]= output[n, c(paste("agent_",list_agent_attr[i], sep = ""))] - output[n, c(list_valid_var[i])]
}
}
}
return(output)
}
new_df = crosstabular_stratfieddf_to_singleside_df(df,nrow_var=2, ncol_var=1, row_var_names = c("migrationbackground", "sex"), col_var_names = c("age"))
View(df)
View(new_df)
new_df$sex[new_df$sex == "mÃ¤nnlich"] = "male"
new_df$sex[new_df$sex == "weiblich"] = "female"
new_df$sex[new_df$sex == "Insgesamt"] = "total"
# Family Position - SEX - Migrationbackground
df = read.csv("family_pos_migration_sex.csv", header = F)
new_df = crosstabular_stratfieddf_to_singleside_df(df,nrow_var=2, ncol_var=1, row_var_names = c("migrationbackground", "sex"), col_var_names = c("familypos"))
new_df$sex[new_df$sex == "mÃ¤nnlich"] = "male"
new_df$sex[new_df$sex == "weiblich"] = "female"
new_df$sex[new_df$sex == "Insgesamt"] = "total"
View(df)
View(new_df)
new_df = restructure_one_var_marginal(new_df, "familypos", "counts")
agents = read.csv("Agent_pop.csv") ## count of people per age group per neighborhood
View(agents)
df = read.csv2("Bevoelkerung100M.csv")
unique(df$Merkmal)
View(df)
migr = df[df$Merkmal == "STAATSANGE_KURZ",]
augsburg_codes = unique(neigh_stats$neighb_code)
colnames(migr)[1] = "neighb_code"
migr_compl = migr_compl[,c("neighb_code", "Auspraegung_Text", "Anzahl")]
migr = migr[order(migr$neighb_code),]
View(migr)
x = as.data.frame(table(migr$neighb_code))
View(x)
completegrids = x[x$Freq > 1, 1]
migr_compl = migr[which(migr$neighb_code %in% completegrids),]
migr_compl= restructure_one_var_marginal(migr_compl, "migrationbackground", "counts")
migr_compl = migr_compl[,c("neighb_code", "Auspraegung_Text", "Anzahl")]
colnames(migr_compl) = c("neighb_code", "migrationbackground", "counts")
migr_compl= restructure_one_var_marginal(migr_compl, "migrationbackground", "counts")
View(migr_compl)
migr[which(migr$neighb_code %in% augsburg_codes),]
which(as.character(migr_compl$neighb_code) %in% as.character(augsburg_codes))
migr_compl_select = merge(migr_compl, neigh_stats[,c("neighb_code", "pop")], by.x = "neighb_code", by.y = "neighb_code", all.x = F )
View(neigh_stats)
colnames(neigh_stats)[2] = "neighb_code"
migr_compl_select = merge(migr_compl, neigh_stats[,c("neighb_code", "pop")], by.x = "neighb_code", by.y = "neighb_code", all.x = F )
typeof(migr_compl$neighb_code)
typeof(neigh_stats$neighb_code)
migr_compl$neighb_code= trimws(migr_compl$neighb_code)
neigh_stats$neighb_code= trimws(neigh_stats$neighb_code)
#Stratified datasets
# AGE - SEX - MIGRATIONBACKGROUND
sexstats = read.csv("sex_age.csv")
View(sexstats)
colnames(sexstats)[1] = "age"
# age groups are "AG2" "AG5" "AG8" "AG7" "AG4" "AG1" "AG3" "AG6" "AG9"
sexstats$age_group[sexstats$age %in% c("0 bis unter 3", "3 bis unter 6", "6 bis unter 10")] = "AG1"
sexstats$age_group[sexstats$age %in% c("10 bis unter 16", "16 bis unter 18","18 bis unter 20")] = "AG2"
sexstats$age_group[sexstats$age == "20 bis unter 30"] = "AG3"
sexstats$age_group[sexstats$age == "30 bis unter 40"] = "AG4"
sexstats$age_group[sexstats$age == "40 bis unter 50"] = "AG5"
sexstats$age_group[sexstats$age == "50 bis unter 60"] = "AG6"
sexstats$age_group[sexstats$age == "60 bis unter 70"] = "AG7"
sexstats$age_group[sexstats$age == "70 bis unter 80"] = "AG8"
sexstats$age_group[sexstats$age  %in% c("80 bis unter 90", "90 und Ã¤lter")] = "AG9"
unique(agents$age_group)
sexstats$group_age_male = NA
sexstats$group_age_female = NA
sexstats$group_age_tot = NA
for(i in unique(sexstats$age_group)){
sexstats[sexstats$age_group == i, c("group_age_male")] = sum(sexstats[sexstats$age_group== i, c("male")])
sexstats[sexstats$age_group == i, c("group_age_female")] = sum(sexstats[sexstats$age_group== i, c("female")])
sexstats[sexstats$age_group == i, c("group_age_tot")] = sum(sexstats[sexstats$age_group== i, c("total")])
}
sexstats = unique(sexstats[,c("age_group", "group_age_male", "group_age_female", "group_age_tot")])
## Data Preparation
colnames(sexstats) = c("age_group", "male", "female", "totpop")
sexstats$totpop = sexstats$male + sexstats$female
View(agents)
agents2 = subset(agents, select = -c("pop_female"))
agents2 = subset(agents, select = -c(pop_female))
agents2 = subset(agents, select = -c(prop_female))
View(agents2)
## Conditional Propensities
agents = calc_propens_agents(sexstats, "female", "totpop", agents2, c("age_group"))
View(agents)
View(new_df)
View(neigh_stats)
## Conditional Propensities
agents2 = calc_propens_agents(sexstats, "female", "totpop", agents2, c("age_group"))
agents2 = subset(agents2, select = -c(sex))
## assigning attributes to agents
agents2 = distr_bin_attr_strat_n_neigh_stats(agent_df = agents2, neigh_df = neigh_stats, neigh_ID = "neighb_code",
variable=  "sex",  list_var_classes_neigh_df = c( "G2", "G1"), list_agent_propens =  c("prop_female"),
list_class_names = c("female", "male"))
View(agents)
